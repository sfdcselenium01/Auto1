name: Run Robot Framework and Selenium

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  robot-tests-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install robotframework
          pip install robotframework-seleniumlibrary

      - name: Run Robot Framework tests
        run: |
          robot  -x outputxunit.xml Selenium.robot
      - name: Rerun testing if failed
        if: failure()
        run: |
          7z a -tzip old_output.zip *.html
          find output/ -name "*.png" -delete
          find output/ -name "*.html" -delete
          find output/ -name "*.xml" -delete
          robot  -x outputxunit.xml Selenium.robot
      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        with:
          comment_title: FOS UI Test ${{ github.run_id }}
          junit_files: outputxunit.xml

      - name: 'Copy Files to: ${{ runner.temp }}'
        if: success() || failure()
        uses: actions/github-script@v7.0.0
        env:
          TARGET_FOLDER: "${{ runner.temp }}"
          SOURCE_FOLDER: "${{ github.workspace }}"
          CLEAN_TARGET_FOLDER: false
          FLATTEN_FOLDERS: false
          OVERWRITE: false
          CONTENTS: |-
            *.html
            *.png
            *.xml
            *.zip
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |-
            const fs = require('fs').promises
            const path = require('path')
            const target = path.resolve(process.env.TARGET_FOLDER)
            process.chdir(process.env.SOURCE_FOLDER || '.')
            if (process.env.CLEAN_TARGET_FOLDER === 'true') await io.rmRF(target)
            const flattenFolders = process.env.FLATTEN_FOLDERS === 'true'
            const options = {force: process.env.OVERWRITE === 'true'}
            const globber = await glob.create(process.env.CONTENTS || '**')
            for await (const file of globber.globGenerator()) {
              if ((await fs.lstat(file)).isDirectory()) continue
              const filename = flattenFolders ? path.basename(file) : file.substring(process.cwd().length)
              const dest = path.join(target, filename)
              await io.mkdirP(path.dirname(dest))
              await io.cp(file, dest, options)
            }
      - name: 'Publish Artifact: Testing Outputs'
        if: success() || failure()
        uses: actions/upload-artifact@v4.1.0
        with:
          name: Testing Outputs
          path: "${{ runner.temp }}"
